# -*- coding: utf-8 -*-
"""
Created on Fri Mar 29 09:04:42 2019

@author: Andy Haixin Chen
"""


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

survey_df = pd.read_excel('finalExam_Mobile_App_Survey_Data_final_exam-2.xlsx')

survey_df.columns


# Printing our columns with indexes
for col in enumerate(survey_df):
    print(col)
    


###############################################################################
# Exploratory Data Analysis
###############################################################################

survey_df.info()


survey_df.describe(percentiles = [0.01,
                                  0.05,
                                  0.10,
                                  0.25,
                                  0.50,
                                  0.75,
                                  0.90,
                                  0.95,
                                  0.99]).round(2)



# Identifying demographic data
demo_columns = ['caseID',
                'q1', # age 
                'q48', # education level
                'q49', # maritial status
                'q50r1', # chidren age group
                'q50r2', 
                'q50r3', 
                'q50r4', 
                'q50r5',
                'q54', # race
                'q55', # Hispanic or Latino
                'q56', # Income
                'q57' # gender
                ]


# Checking class balances
for col in demo_columns:
    print(f""" {col}:
          \n{survey_df[col].value_counts()}\n
          """)


# Viewing the first few rows of the data
survey_df.head(n = 5)



########################
# Histograms
########################

# Plotting demographic information
fig, ax = plt.subplots(figsize=(14,14))
plt.subplot(7, 4, 1)
sns.distplot(a = survey_df['q49'],
             hist = True,
             kde = True,
             color = 'blue')

plt.subplot(7, 4, 2)
sns.distplot(a = survey_df['q54'],
             hist = True,
             kde = True,
             color = 'red')

plt.subplot(7, 4, 3)
sns.distplot(a = survey_df['q55'],
             hist = True,
             kde = True,
             color = 'blue')

plt.subplot(7, 4, 4)
sns.distplot(a = survey_df['q56'],
             hist = True,
             kde = True,
             color = 'red')

plt.subplot(7, 4, 5)
sns.distplot(a = survey_df['q57'],
             hist = True,
             kde = True,
             color = 'blue')


plt.subplot(7, 4, 6)
sns.distplot(a = survey_df['q48'],
             hist = True,
             kde = True,
             color = 'red')


plt.subplot(7, 4, 7)
sns.distplot(a = survey_df['q50r1'],
             hist = True,
             kde = True,
             color = 'gray')


plt.subplot(7, 4, 8)
sns.distplot(a = survey_df['q50r2'],
             hist = True,
             kde = True,
             color = 'green')

plt.subplot(7, 4, 9)
sns.distplot(a = survey_df['q50r3'],
             hist = True,
             kde = True,
             color = 'red')

plt.subplot(7, 4, 10)
sns.distplot(a = survey_df['q50r4'],
             hist = True,
             kde = True,
             color = 'blue')

plt.subplot(7, 4, 11)
sns.distplot(a = survey_df['q50r5'],
             hist = True,
             kde = True,
             color = 'yellow')

plt.show()




########################
# Correlation analysis
########################

fig, ax = plt.subplots(figsize = (8, 8))


df_corr = survey_df.corr().round(2)


sns.heatmap(df_corr,
            cmap = 'coolwarm',
            square = True,
            annot = True)


plt.savefig('mobile_app_correlations.png')
plt.show()



###############################################################################
# Model Code
###############################################################################


##########################
# PCA preparation
##########################

# Reversing questions
survey_df['q11'].value_counts()
survey_df['rev_q11'].value_counts()

survey_df['q24r4'].value_counts()
survey_df['rev_q24r4'].value_counts()

survey_df['q24r12'].value_counts()
survey_df['rev_q24r12'].value_counts()

survey_df['q24r9'].value_counts()
survey_df['rev_q24r9'].value_counts()

survey_df['q25r6'].value_counts()
survey_df['rev_q25r6'].value_counts()



# Create a new column
survey_df['rev_q11'] = 666
survey_df['rev_q24r4'] = 666
survey_df['rev_q24r9'] = 666
survey_df['rev_q24r12'] = 666
survey_df['rev_q25r6'] = 666


# Reversed out original clumn
survey_df['rev_q11'][survey_df['q11'] == 1] = 4
survey_df['rev_q11'][survey_df['q11'] == 2] = 3
survey_df['rev_q11'][survey_df['q11'] == 3] = 2
survey_df['rev_q11'][survey_df['q11'] == 4] = 1
survey_df['rev_q11'][survey_df['q11'] == 5] = 5


survey_df['rev_q24r4'][survey_df['q24r4'] == 1] = 6
survey_df['rev_q24r4'][survey_df['q24r4'] == 2] = 5
survey_df['rev_q24r4'][survey_df['q24r4'] == 3] = 4
survey_df['rev_q24r4'][survey_df['q24r4'] == 4] = 3
survey_df['rev_q24r4'][survey_df['q24r4'] == 5] = 2
survey_df['rev_q24r4'][survey_df['q24r4'] == 6] = 1


survey_df['rev_q24r9'][survey_df['q24r9'] == 1] = 6
survey_df['rev_q24r9'][survey_df['q24r9'] == 2] = 5
survey_df['rev_q24r9'][survey_df['q24r9'] == 3] = 4
survey_df['rev_q24r9'][survey_df['q24r9'] == 4] = 3
survey_df['rev_q24r9'][survey_df['q24r9'] == 5] = 2
survey_df['rev_q24r9'][survey_df['q24r9'] == 6] = 1


survey_df['rev_q24r12'][survey_df['q24r12'] == 1] = 6
survey_df['rev_q24r12'][survey_df['q24r12'] == 2] = 5
survey_df['rev_q24r12'][survey_df['q24r12'] == 3] = 4
survey_df['rev_q24r12'][survey_df['q24r12'] == 4] = 3
survey_df['rev_q24r12'][survey_df['q24r12'] == 5] = 2
survey_df['rev_q24r12'][survey_df['q24r12'] == 6] = 1


survey_df['rev_q25r6'][survey_df['q25r6'] == 1] = 6
survey_df['rev_q25r6'][survey_df['q25r6'] == 2] = 5
survey_df['rev_q25r6'][survey_df['q25r6'] == 3] = 4
survey_df['rev_q25r6'][survey_df['q25r6'] == 4] = 3
survey_df['rev_q25r6'][survey_df['q25r6'] == 5] = 2
survey_df['rev_q25r6'][survey_df['q25r6'] == 6] = 1



# Dropping the old column
survey_df = survey_df.drop(['q11','q24r4','q24r9','q24r12','q25r6'], axis = 1)


########################
# Step 1: Remove demographic information
########################

survey_df_reduced = survey_df.drop(demo_columns, axis = 1)


########################
# Step 2: Scale to get equal variance
########################

scaler = StandardScaler()


scaler.fit(survey_df_reduced)


X_scaled = scaler.transform(survey_df_reduced)



########################
# Step 3: Run PCA without limiting the number of components
########################

pca = PCA(n_components = None,
          random_state = 508)


pca.fit(X_scaled)


pca.transform(X_scaled)



########################
# Step 4: Analyze the scree plot to determine how many components to retain
########################

fig, ax = plt.subplots(figsize=(18, 18))

features = range(pca.n_components_)


plt.plot(features,
         pca.explained_variance_ratio_,
         linewidth = 2,
         marker = 'o',
         markersize = 10,
         markeredgecolor = 'black',
         markerfacecolor = 'grey')


plt.title('Reduced Wholesale Customer Scree Plot')
plt.xlabel('PCA feature')
plt.ylabel('Explained Variance')
plt.xticks(features)
plt.show()



########################
# Cumulative variance
########################

n = 41

print(f"""
    At least {n} Principal Components could explain {(sum(pca.explained_variance_ratio_[0:n])*100).round(2)}% or variance.
    \n\tIn order to reduce the difficulty of analysis, we decide to take the top 5 components in our PCA model.
""")


########################
# Step 5: Run PCA again based on the desired number of components
########################

pca = PCA(n_components = 5,
          random_state = 508)


pca.fit(X_scaled)



########################
# Step 6: Analyze factor strengths per customer
########################


X_pca_df = pd.DataFrame(pca.transform(X_scaled))



########################
# Step 7: Analyze factor loadings to understand principal components
########################

factor_loadings_df = pd.DataFrame(pd.np.transpose(pca.components_))


factor_loadings_df = factor_loadings_df.set_index(survey_df.drop(demo_columns, axis = 1).columns)


print(factor_loadings_df)


factor_loadings_df.to_excel('11_final_factor_loadings.xlsx')


"""
Finding:
    PC 2,3,5 indicate potential needs for mobile apps.
    cluster 1
"""


########################
# Step 8: Rename your principal components and reattach demographic information
########################

X_pca_df.columns = ['antimobiler_hater', 
                    'paid_muvid_lover', 
                    'economic_antimobiler', 
                    'paid_professional_user', 
                    'economic_musrad_lover']

final_pca_df = pd.concat([survey_df.loc[ : , demo_columns] , X_pca_df], axis = 1)




###############################################################################
# Combining PCA and Clustering!!!
###############################################################################


########################
# Step 1: Take your transformed dataframe
########################

print(X_pca_df.head(n = 5))


print(pd.np.var(X_pca_df))



########################
# Step 2: Scale to get equal variance
########################


scaler = StandardScaler()


scaler.fit(X_pca_df)


X_pca_clust = scaler.transform(X_pca_df)


X_pca_clust_df = pd.DataFrame(X_pca_clust)


print(pd.np.var(X_pca_clust_df))


X_pca_clust_df.columns = X_pca_df.columns



########################
# Step 3: Experiment with different numbers of clusters
########################

kmean_pca = KMeans(n_clusters = 5,
                   random_state = 508)


kmean_pca.fit(X_pca_clust_df)


kmean_pca_df = pd.DataFrame({'cluster': kmean_pca.labels_})


print(kmean_pca_df.iloc[: , 0].value_counts())




########################
# Step 4: Analyze cluster centers
########################

centroids_pca_df = pd.DataFrame(kmean_pca.cluster_centers_)



# Rename your principal components
centroids_pca_df.columns = ['PC1', 'PC2', 'PC3', 'PC4','PC5']


print(centroids_pca_df)


# Sending data to Excel
centroids_pca_df.to_excel('pca_centriods.xlsx')


print("""
Finding:
    Cluters 4 contributes a lot to column '1' ('paid_muvid_lover')
    Cluster 1 contributes a lot to column '3' ('paid_professional_user')
""")


########################
# Step 5: Analyze cluster memberships
########################

clst_pca_df = pd.concat([kmean_pca_df,
                         X_pca_clust_df],
                         axis = 1)


print(clst_pca_df)



########################
# Step 6: Reattach demographic information
########################

final_pca_clust_df = pd.concat([survey_df.loc[ : , demo_columns],
                                clst_pca_df],
                                axis = 1)


print(final_pca_clust_df.head(n = 5))





###############################################################################
# Code for Data Analysis
###############################################################################


# Renaming q1 to age
age = {1 : 'Under 18',
       2 : '18-24',
       3 : '25-29',
       4 : '30-34',
       5 : '35-39',
       6 : '40-44',
       7 : '45-49',
       8 : '50-54',
       9 : '55-59',
       10 : '60-64',
       11: '65 or over'
       }


final_pca_clust_df['q1'].replace(age, inplace = True)


# Renaming q48 to education
education = {1 : 'Some high school',
             2 : 'High school graduate',
             3 : 'Some college',
             4 : 'College graduate',
             5 : 'Some post-graduate studies',
             6 : 'Post graduate degree'}


final_pca_clust_df['q48'].replace(education, inplace = True)



# Renaming q49 to marriage
marriage = {1 : 'Married',
             2 : 'Single',
             3 : 'Single with a partner',
             4 : 'Seperated/Windowed/Divorced'}


final_pca_clust_df['q49'].replace(marriage, inplace = True)


# Renaming q50 to children's age

final_pca_clust_df['q50'] = 666

final_pca_clust_df['q50'] [final_pca_clust_df['q50r1'] == 1] = 'No Children'
final_pca_clust_df['q50'] [final_pca_clust_df['q50r2'] == 1] = 'Children under 6 years old'
final_pca_clust_df['q50'] [final_pca_clust_df['q50r3'] == 1] = 'Children 6-12 years old'
final_pca_clust_df['q50'] [final_pca_clust_df['q50r4'] == 1] = 'Children 13-17 years old'
final_pca_clust_df['q50'] [final_pca_clust_df['q50r5'] == 1] = 'Children 18 or order'

final_pca_clust_df = final_pca_clust_df.drop(['q50r1','q50r2','q50r3','q50r4','q50r5'], axis = 1)


# Renaming q54 to ethicity
ethnicity = {1 : 'White or Caucasian',
             2 : 'Black or African American',
             3 : 'Asian',
             4 : 'Native Hawaiian or Other Pacific islander',
             5 : 'American Indian or Alaska Native',
             6 : 'Other race'}


final_pca_clust_df['q54'].replace(ethnicity, inplace = True)


# Renaming q55 to Hispanic or Latino
hispanio = {1 : 'Hispanio or Latino',
            2 : 'Not Hispanio or Latino'}


final_pca_clust_df['q55'].replace(hispanio, inplace = True)


# Renaming q56 to income
income = {1 : 'Under poverty line',
          2 : 'Under poverty line',
          3 : 'Under poverty line',
          4 : '$2k-$5k',
          5 : '$2k-$5k',
          6 : '$2k-$5k',
          7 : '$5k-$7k',
          8 : '$5k-$7k',
          9 : '$7k-10k',
          10 : '$7k-10k',
          11 : '$7k-10k',
          12 : '$10k-$15k',
          13 : '$10k-$15k',
          14 : '$10k-$15k'
          }
          


final_pca_clust_df['q56'].replace(income, inplace = True)


# Renaming q57 to gender
gender = {1 : 'Male',
          2 : 'Female'
          }


final_pca_clust_df['q57'].replace(gender, inplace = True)



# Adding a productivity step
data_df = final_pca_clust_df


# Correlation 
fig, ax = plt.subplots(figsize = (12, 12))


data_df_corr = data_df.corr().round(2)


sns.heatmap(data_df_corr,
            cmap = 'coolwarm',
            square = True,
            annot = True)


plt.savefig('mobile_app_correlations.png')
plt.show()


print("""
   Paid music & video lover has higher correlation with the cluster.
    Hence, we will study how to target cluter 2 or 4 for their music & video appetite.  
""")


########################
# Paid Muvid Lover
########################

# age
fig, ax = plt.subplots(figsize = (12, 8))
sns.boxplot(x = 'q1',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()


# education
fig, ax = plt.subplots(figsize = (13, 5))
sns.boxplot(x = 'q48',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()



# maritual status
fig, ax = plt.subplots(figsize = (10, 5))
sns.boxplot(x = 'q49',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()



# children's age
fig, ax = plt.subplots(figsize = (10, 5))
sns.boxplot(x = 'q50',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()


# ethicity
fig, ax = plt.subplots(figsize = (13, 8))
sns.boxplot(x = 'q54',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()


# Hispanic or Latino
fig, ax = plt.subplots(figsize = (10, 5))
sns.boxplot(x = 'q55',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()



# gender
fig, ax = plt.subplots(figsize = (10, 5))
sns.boxplot(x = 'q57',
            y = 'paid_muvid_lover',
            hue = 'cluster',
            data = data_df)

plt.tight_layout()
plt.show()



########################
# Exporting Results
########################
name =['age',
       'education',
       'maritial_status',
       'ethnicity',
       'hispanio',
       'income',
       'gender']

data_df.iloc[:,1:8].columns = name
data_df.loc[:,'q50'].columns = 'children_age'


data_df.to_excel('data_df_Fillmore.xlsx')
